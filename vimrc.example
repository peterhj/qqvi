function! _Qq(...)
  " optional: save before :qq
  ""if &modified
  ""  write
  ""endif
  let l:post = {
      \ 'exit_cb': function('_QqPost'),
      \ 'err_cb': function('_QqErr'),
      \ 'err_io': 'pipe',
      \ 'out_io': 'null' }
  let l:args = ['_qq_vim', expand('%')] + a:000
  let l:job = job_start(l:args, l:post)
  if job_status(l:job) == 'fail'
    echohl ErrorMsg
    echomsg "failed to qq!"
    echohl None
    return
  endif
  let s:qq_job = l:job
  let s:qq_err = []
  echohl User1
  echomsg 'qq...'
  echohl None
endfunction

function! _QqErr(chan, msg)
  call add(s:qq_err, a:msg)
endfunction

function! _QqPost(job, status)
  if a:status != 0
    echohl ErrorMsg
    echomsg "failed to qq: status ".a:status.":"
    for line in s:qq_err
      echomsg line
    endfor
    echohl None
    return
  endif
  let l:line = line('.')
  let l:col = col('.')
  ""checktime
  edit
  call cursor(l:line, l:col)
endfunction

function! _Qqq(...)
  let l:p = system('_qqq_vim')
  let l:p = substitute(l:p, '\n$', '', '')
  execute 'edit ' . l:p
endfunction

command! -nargs=* Qq call _Qq()
cnoreabbrev <expr> qq (getcmdtype() == ':' && getcmdline() =~ '^qq$')? 'call _Qq()' : 'qq'

command! -nargs=* Qqq call _Qqq()
cnoreabbrev <expr> qqq (getcmdtype() == ':' && getcmdline() =~ '^qqq$')? 'call _Qqq()' : 'qqq'
cnoreabbrev <expr> qqqq (getcmdtype() == ':' && getcmdline() =~ '^qqqq$')? 'call _Qqq()' : 'qqqq'
cnoreabbrev <expr> qqqqq (getcmdtype() == ':' && getcmdline() =~ '^qqqqq$')? 'call _Qqq()' : 'qqqqq'
